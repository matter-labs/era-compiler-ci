name: Solc tests and benchmarks

on:
  workflow_call:
    inputs:
      compiler_tester_reference_branch:
        description: "compiler-tester branch to use as a benchmark reference"
        type: string
        required: false
        default: "main"
      compiler_tester_candidate_branch:
        description: "compiler-tester branch to use as a benchmark candidate"
        type: string
        required: false
        default: "era-solidity-test"

concurrency:
  group: ${{ github.repository_id }}-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      solc-version: ${{ steps.set.outputs.solc-version }}
      zksync-version: ${{ steps.set.outputs.zksync-version }}
      use-new-tools: ${{ steps.use-new-tools.outputs.result }}
      use-gcc: ${{ steps.use-gcc.outputs.result }}
      run-evm-benchmarks: ${{ steps.run-evm-benchmarks.outputs.result }}
      use-windows-clang: ${{ steps.use-windows-clang.outputs.result }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Define release version
        shell: bash
        id: set
        run: |
          if [[ ${{ github.event_name }} != 'pull_request' ]]; then
            echo "zksync-version=$(cut -d "-" -f2 <<< ${GITHUB_REF#refs/*/})" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "zksync-version=1.0.${{ github.run_id }}" | tee -a "${GITHUB_OUTPUT}"
          fi
          SOLC_VERSION=$(grep 'PROJECT_VERSION' CMakeLists.txt | grep -oP '(\d+\.\d+\.\d+)')
          echo "solc-version=${SOLC_VERSION}" | tee -a "${GITHUB_OUTPUT}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semver
        run: npm install semver

      - name: Check that version is <= 0.4.16
        id: use-gcc
        uses: actions/github-script@v7
        with:
          script: |
            const semver = require('semver');
            const currentVersion = '${{ steps.set.outputs.solc-version }}';
            const result = semver.lte(currentVersion, '0.4.16');
            console.log(`Is the version <= 0.4.16? ${result}`);
            return result;
          result-encoding: string

      - name: Check that version is >= 0.5.1
        id: use-new-tools
        uses: actions/github-script@v7
        with:
          script: |
            const semver = require('semver');
            const currentVersion = '${{ steps.set.outputs.solc-version }}';
            const result = semver.gte(currentVersion, '0.5.1');
            console.log(`Is the version >= 0.5.1? ${result}`);
            return result;
          result-encoding: string

      # TODO: identify the exact version instead of 0.8.19
      - name: Check that version is >= 0.8.19
        id: use-windows-clang
        uses: actions/github-script@v7
        with:
          script: |
            const semver = require('semver');
            const currentVersion = '${{ steps.set.outputs.solc-version }}';
            const result = semver.gte(currentVersion, '0.8.19');
            console.log(`Is the version >= 0.8.19? ${result}`);
            return result;
          result-encoding: string

      - name: Check that version is >= 0.8.29
        id: run-evm-benchmarks
        uses: actions/github-script@v7
        with:
          script: |
            const semver = require('semver');
            const currentVersion = '${{ steps.set.outputs.solc-version }}';
            const result = semver.gte(currentVersion, '0.8.29');
            console.log(`Is the version >= 0.8.29? ${result}`);
            return result;
          result-encoding: string

  compiler-tester-ref:
    runs-on: ubuntu-latest
    name: Compiler tester ref
    outputs:
      reference-ref: ${{ steps.compiler_tester_ref.outputs.reference-ref }}
      candidate-ref: ${{ steps.compiler_tester_ref.outputs.candidate-ref }}
    env:
      ERA_SOLIDITY_TEST_TAG: era-solidity-test
      ERA_SOLIDITY_REF_DEFAULT: main
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: matter-labs/era-compiler-tester

      - name: Define compiler tester ref
        id: compiler_tester_ref
        shell: bash
        run: |
          REFERENCE_REF=${{ inputs.compiler_tester_reference_branch || env.ERA_SOLIDITY_REF_DEFAULT }}
          if [ -n "$(git ls-remote --tags --heads --refs origin ${REFERENCE_REF})" ]; then
            echo "reference-ref=${REFERENCE_REF}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "reference-ref=${{ env.ERA_SOLIDITY_REF_DEFAULT }}" | tee -a "${GITHUB_OUTPUT}"
          fi
          CANDIDATE_REF=${{ inputs.compiler_tester_candidate_branch || env.ERA_SOLIDITY_TEST_TAG }}
          if [ -n "$(git ls-remote --tags --heads --refs origin ${CANDIDATE_REF})" ]; then
            echo "candidate-ref=${CANDIDATE_REF}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "candidate-ref=${{ env.ERA_SOLIDITY_REF_DEFAULT }}" | tee -a "${GITHUB_OUTPUT}"
          fi

  # Define target for integration tests and benchmarks
  # based on PR title labels
  target-machine:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      evm: ${{ steps.evm.outputs.machine || steps.default.outputs.evm }}
      eravm: ${{ steps.eravm.outputs.machine || steps.default.outputs.eravm }}
    steps:

      - name: Check for EraVM target
        id: eravm
        if: contains(github.event.pull_request.title, '(eravm)') || contains(github.event.pull_request.title, '(EraVM)')
        run: echo "machine=eravm" | tee -a "${GITHUB_OUTPUT}"

      - name: Check for EVM target
        id: evm
        if: contains(github.event.pull_request.title, '(evm)') || contains(github.event.pull_request.title, '(EVM)')
        run: echo "machine=evm" | tee -a "${GITHUB_OUTPUT}"

      - name: Check for default target
        id: default
        shell: bash -ex {0}
        run: |
          if [[ "${{ join(steps.*.outputs.*) }}" == "" ]]; then
            echo "eravm=eravm" | tee -a "${GITHUB_OUTPUT}"
            if [ ${{needs.setup.outputs.run-evm-benchmarks }} == 'true' ]; then
              echo "evm=evm" | tee -a "${GITHUB_OUTPUT}"
            fi
          fi

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: "reference"
            ref: ${{ github.base_ref }}
          - type: "candidate"
            ref: ''
    runs-on: [ci-runner-compiler, Linux]
    needs: setup
    name: build-${{ matrix.type }}
    container:
      image: ${{ needs.setup.outputs.use-new-tools == 'true' && 'ghcr.io/matter-labs/zksync-llvm-runner:latest' || 'matterlabs/llvm_runner:ubuntu20-llvm17-latest' }}
    outputs:
      solc-version: ${{ steps.project_version.outputs.solc-version }}
    steps:

      - name: Checking out the Solidity repository
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.ref }}
          submodules: recursive

      - name: Define project version
        id: project_version
        shell: bash
        run: |
          SOLC_VERSION=$(grep 'PROJECT_VERSION' CMakeLists.txt | grep -oP '(\d+\.\d+\.\d+)')
          echo "solc-version=${SOLC_VERSION}" | tee -a "${GITHUB_OUTPUT}"

      - name: Building the Solidity compiler
        uses: matter-labs/era-compiler-ci/.github/actions/build-solc@main
        with:
          solc-version: ${{ steps.project_version.outputs.solc-version }}
          zksync-version: 1.0.${{ github.run_id }}
          build-type: ${{ matrix.type }}
          boost-version: ${{ needs.setup.outputs.use-new-tools == 'true' && '1.83.0' || '1.71.0' }}
          use-gcc: ${{ needs.setup.outputs.use-gcc }}
          use-windows-clang: ${{ needs.setup.outputs.use-windows-clang }}
          upload-testing-binary: true

  # Integration tests workflow call from the era-compiler-ci repository
  # This is a common part of the integration tests workflow for all repositories
  # If you would like to make a change to the integration tests workflow, please do it in the era-compiler-ci repository
  integration-tests:
    needs: [ compiler-tester-ref, build ]
    uses: matter-labs/era-compiler-ci/.github/workflows/integration-tests.yaml@main
    secrets: inherit
    with:
      compiler-tester-ref: ${{ needs.compiler-tester-ref.outputs.candidate-ref }}
      path: 'tests/solidity/'
      custom-solc-run-id: ${{ github.run_id }}
      custom-solc-version: ${{ needs.build.outputs.solc-version }}
      extra-args: --mode "${{ github.base_ref }}"


  # Benchmarks workflow call from the era-compiler-ci repository
  # This is a common part of the benchmarks workflow for all repositories
  # If you would like to make a change to the benchmarks workflow, please do it in the era-compiler-ci repository
  benchmarks:
    needs: [ compiler-tester-ref, target-machine, build ]
    uses: matter-labs/era-compiler-ci/.github/workflows/benchmarks.yml@main
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        target: '${{ needs.target-machine.outputs.* }}'
        toolchain: ['ir-llvm']
    with:
      compiler_tester_reference_branch: ${{ needs.compiler-tester-ref.outputs.reference-ref }}
      compiler_tester_candidate_branch: ${{ needs.compiler-tester-ref.outputs.candidate-ref }}
      compiler_llvm_benchmark_mode: '+M^B3 ${{ needs.build.outputs.solc-version }}'
      compiler_llvm_benchmark_path: 'tests/solidity/'
      custom-solc-run-id: ${{ github.run_id }}
      custom-solc-version: ${{ needs.build.outputs.solc-version }}
      target-machine: ${{ matrix.target }}
      toolchain: ${{ matrix.toolchain }}
      environment: ${{ matrix.target == 'eravm' && 'zk_evm' || 'EVMInterpreter' }}
