name: Foundry tests

on:
  workflow_call:
    inputs:
      upload-reports:
        description: 'Upload reports to the PR.'
        type: string
        required: false
        default: "true"
      solx_candidate_branch:
        description: 'Specific `solx` candidate ref to use for building `solx`.'
        type: string
        required: false
        default: ''
      solx_reference_branch:
        description: 'Specific `solx` reference ref to use for building `solx`.'
        type: string
        required: false
        default: ''
      solx-repo:
        type: string
        required: false
        default: 'matter-labs/solx'
        description: 'Solx repository to use. Required for forks testing.'
      compiler_llvm_candidate_branch:
        description: 'Specific LLVM candidate ref to use for building `solx`.'
        type: string
        required: false
        default: ''
      compiler-llvm-repo:
        type: string
        required: false
        default: 'matter-labs/era-compiler-llvm'
        description: 'Compiler LLVM repository to use. Required for forks testing.'
      print-markdown-tables:
        description: 'Report markdown tables to the PRs.'
        type: string
        required: false
        default: "true"
      excel-reports:
        description: 'Generate and upload Excel reports.'
        type: string
        required: false
        default: "true"

permissions:
  contents: read
  pull-requests: write

# Cancel the workflow if any new changes pushed to a feature branch or the trunk
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -ex {0}

jobs:

  build-solx:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    strategy:
      fail-fast: false
      matrix:
        type: ["reference", "candidate"]
    steps:

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.solx-repo }}
          submodules: 'recursive'
          ref: ${{ matrix.type == 'candidate' && inputs.solx_candidate_branch || inputs.solx_reference_branch || '' }}

      # This step is required to checkout submodules
      # that are disabled in .gitmodules config
      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --force --depth=1 --recursive --checkout

      - name: Remove llvm submodule
        if: ${{ contains(github.repository, 'era-compiler-llvm') && matrix.type == 'candidate' }}
        run: rm -rf llvm

      - name: Checkout llvm
        if: ${{ contains(github.repository, 'era-compiler-llvm') && matrix.type == 'candidate' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.compiler-llvm-repo }}
          path: llvm
          ref: ${{ inputs.compiler_llvm_candidate_branch || '' }}

      - name: Building solc
        uses: matter-labs/era-compiler-ci/.github/actions/build-solc@v1
        with:
          cmake-build-type: 'Release'
          working-dir: 'era-solidity'
          upload-testing-binary: false

      - name: Build LLVM
        uses: matter-labs/era-compiler-ci/.github/actions/build-llvm@v1
        with:
          clone-llvm: 'false'
          build-type: Release
          enable-assertions: 'false'
          ccache-key: ${{ format('llvm-{0}-{1}', runner.os, runner.arch) }}

      - name: Build solx
        uses: matter-labs/era-compiler-ci/.github/actions/build-rust@v1
        env:
          BOOST_PREFIX: ${{ github.workspace }}/era-solidity/boost/lib
          SOLC_PREFIX: ${{ github.workspace }}/era-solidity/build
        with:
          exec_name: 'solx'
          target: 'x86_64-unknown-linux-gnu'
          release-suffix: test-${{ matrix.type }}

  # Special job to separate projects by chunks
  # and execute chunks in parallel later.
  prepare-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.projects.outputs.projects }}
    env:
      MAX_RUNNERS: 6 # how many max runners we can occupy in parallel
      BENCHMARKS_TOML: './forge-benchmarks/forge-benchmarks.toml'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: matter-labs/era-compiler-ci
          ref: common-solx-forge
          sparse-checkout: ${{ env.BENCHMARKS_TOML }}

      - name: Prepare projects
        id: projects
        run: |
          # Filter huge projects in PRs
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            projects=$(yq 'to_entries | map(select(.value.category != "huge")) | .[].key' ${BENCHMARKS_TOML} | tr '\n' ' ')
            projects_len=$(yq 'to_entries | map(select(.value.category != "huge")) | length' ${BENCHMARKS_TOML})
          else
            projects=$(yq '. as $root | keys[]' ${BENCHMARKS_TOML} | tr '\n' ' ')
            projects_len=$(yq '. | keys | length' ${BENCHMARKS_TOML})
          fi
          read -a arr <<< "${projects}"
          chunk_size="$(( (projects_len + MAX_RUNNERS - 1) / MAX_RUNNERS ))"
          groups=()
          for ((i=0; i<${#arr[@]}; i+=chunk_size)); do
            group="${arr[@]:i:chunk_size}"
            groups+=("$group")
          done
          JSON=$(jq -cn --argjson g "$(printf '%s\n' "${groups[@]}" | jq -R . | jq -s .)" '$g')
          echo "projects=${JSON}" >> ${GITHUB_OUTPUT}

  test:
    needs: [build-solx, prepare-projects]
    runs-on: matterlabs-ci-runner-high-performance
    env:
      DEFAULT_ITERATIONS: 20
    outputs:
      solx-version: ${{ steps.solx.outputs.solx-version }}
      solx-latest-release-version: ${{ steps.solx.outputs.solx-latest-release-version }}
      solx-tot-version: ${{ steps.solx.outputs.solx-tot-version }}
      solx-llvm-version: ${{ steps.solx.outputs.solx-llvm-version }}
      solc-base-version: ${{ steps.solx.outputs.solc-base-version }}
      compilation_json: ${{ steps.tests.outputs.compilation_json }}
      latest-release: ${{ steps.solx.outputs.latest-release }}
      short-sha: ${{ steps.solx.outputs.short-sha }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.prepare-projects.outputs.projects) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: matter-labs/era-compiler-ci
          ref: common-solx-forge
          sparse-checkout: |
            forge-benchmarks/forge-benchmarks.toml

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release*
          merge-multiple: true
          path: .

      - name: Setup solx
        id: solx
        env:
          SOLX_DOWNLOAD_URL: 'https://github.com/matter-labs/solx/releases/download'
        run: |
          mkdir -p compilers
          cd compilers
          SHA="${{ github.event.pull_request.head.sha || github.sha }}"
          SHORT_SHA="${SHA:0:7}"
          mv ${GITHUB_WORKSPACE}/test-candidate/solx-test-candidate ${GITHUB_WORKSPACE}/compilers/solx-llvm.${SHORT_SHA}
          mv ${GITHUB_WORKSPACE}/test-reference/solx-test-reference ${GITHUB_WORKSPACE}/compilers/solx-ToT
          # Setup latest release solx
          LATEST_RELEASE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/matter-labs/solx/releases/latest \
            | jq -r .tag_name)
          wget "${SOLX_DOWNLOAD_URL}/${LATEST_RELEASE}/solx-linux-amd64-gnu-v${LATEST_RELEASE}"
          mv ./solx-linux-amd64-gnu-v${LATEST_RELEASE} ./solx-${LATEST_RELEASE}
          chmod a+x ./solx-llvm.${SHORT_SHA}
          chmod a+x ./solx-ToT
          chmod a+x ./solx-${LATEST_RELEASE}
          SOLX_VERSION=$(./solx-llvm.${SHORT_SHA} --version | head -n 1)
          SOLX_LATEST_RELEASE_VERSION=$(./solx-${LATEST_RELEASE} --version | head -n 1)
          SOLX_TOT_VERSION=$(./solx-ToT --version | head -n 1)
          SOLX_SOLC_VERSION=$(./solx-llvm.${SHORT_SHA} --version | tail -n 1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          LLVM_VERSION=$(echo "${SOLX_VERSION}" | grep -oP "(?<=LLVM build: )[a-f0-9]{40}")
          echo "short-sha=${SHORT_SHA}" >> ${GITHUB_OUTPUT}
          echo "solx-version=${SOLX_VERSION}" >> ${GITHUB_OUTPUT}
          echo "solx-latest-release-version=${SOLX_LATEST_RELEASE_VERSION}" >> ${GITHUB_OUTPUT}
          echo "solx-tot-version=${SOLX_TOT_VERSION}" >> ${GITHUB_OUTPUT}
          echo "solx-llvm-version=${LLVM_VERSION}" >> ${GITHUB_OUTPUT}
          echo "solc-base-version=${SOLX_SOLC_VERSION}" >> ${GITHUB_OUTPUT}
          echo "latest-release=${LATEST_RELEASE}" >> ${GITHUB_OUTPUT}

      - name: Install foundry
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          export PATH="$PATH:${HOME}/.foundry/bin"
          echo ${HOME}/.foundry/bin >> "${GITHUB_PATH}"
          foundryup

      - name: Install yq
        env:
          YQ_DOWNLOAD_URL: https://github.com/mikefarah/yq/releases/download/v4.45.4/yq_linux_amd64
        run: |
          wget "${YQ_DOWNLOAD_URL}"
          mv yq_linux_amd64 yq
          chmod +x yq

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Yarn
        run: npm install -g yarn

      # Some projects might use hardcoded ssh urls
      # force git to use https instead
      - name: Git https settings
        run: |
          git config --global url."https://github.com/".insteadOf git@github.com:
          git config --global url."https://".insteadOf git://

      - name: Run tests
        id: tests
        run: |
          mkdir -p projects
          compilation_json='{}'
          TOML_CONFIG="${GITHUB_WORKSPACE}/forge-benchmarks/forge-benchmarks.toml"
          export PATH="${GITHUB_WORKSPACE}:${PATH}"
          for PROJECT in ${{ matrix.project }}; do
            DISABLED=$(yq ".${PROJECT}.disabled" "${TOML_CONFIG}")
            if [[ "${DISABLED}" == "true" ]]; then
              echo "Skipping ${PROJECT} as it is disabled"
              continue
            fi
            # Set env variables for a project if any
            while IFS='=' read -r key value; do
              if [[ -n "${key}" ]]; then
                export "${key}=${value}"
                echo "Exported env variable: ${key}=${value} for ${PROJECT}."
              fi
            done < <(
              yq -oj ".${PROJECT}.env // {} | to_entries[]" "${TOML_CONFIG}" |
                jq -r 'select(.key != null) | .key + "=" + (.value | tostring)'
            )
            for COMPILER in solc solx-llvm.${{ steps.solx.outputs.short-sha }} solx-ToT solx-${{ steps.solx.outputs.latest-release }}; do
              for VIA_IR in true false; do
                REPO=$(yq ".${PROJECT}.repo" "${TOML_CONFIG}")
                if [ -d "${GITHUB_WORKSPACE}/projects/${PROJECT}" ]; then
                  cd ${GITHUB_WORKSPACE}/projects
                  rm -rf "${GITHUB_WORKSPACE}/projects/${PROJECT}"
                fi
                git clone --depth 1 "${REPO}" "${GITHUB_WORKSPACE}/projects/${PROJECT}" --recurse-submodules
                cd "${GITHUB_WORKSPACE}/projects/${PROJECT}"
                echo "Running tests for ${PROJECT} with ${COMPILER} via-ir=${VIA_IR}"

                REQUIRES_YARN=$(yq ".${PROJECT}.requires_yarn" "${TOML_CONFIG}")
                if [[ "${REQUIRES_YARN}" == "true" ]]; then
                  echo "Installing yarn dependencies for ${PROJECT}"
                  yarn install
                fi

                # Replace solidity version in all .sol files
                find . -name "*.sol" -type f -exec \
                  sed -i 's/pragma solidity [0-9]\+\.[0-9]\+\.[0-9]\+/pragma solidity ${{ steps.solx.outputs.solc-base-version }}/g' {} +
                # Fix config if required
                forge config --fix
                sed -i '/evm_version.*/d' foundry.toml
                sed -i '/via_ir.*/d' foundry.toml
                sed -i 's/solc.*/solc_version = "${{ steps.solx.outputs.solc-base-version }}"/' foundry.toml
                sed -i 's/solc_version.*/solc_version = "${{ steps.solx.outputs.solc-base-version }}"/' foundry.toml
                # Build project
                [[ ${COMPILER} == *solx* ]] && USE_SOLX="--use ${GITHUB_WORKSPACE}/compilers/${COMPILER}" || USE_SOLX=""
                [ ${VIA_IR} == 'true' ] && VIA_IR_SUFFIX="-viaIR" || VIA_IR_SUFFIX=""
                [ ${VIA_IR} == 'true' ] && VIA_IR_OPTION="--via-ir" || VIA_IR_OPTION=""
                mkdir -p ${GITHUB_WORKSPACE}/${COMPILER}${VIA_IR_SUFFIX}
                BUILD_JSON="${GITHUB_WORKSPACE}/${COMPILER}${VIA_IR_SUFFIX}/build_${PROJECT}.json"
                BUILD_SIZES_JSON="${GITHUB_WORKSPACE}/${COMPILER}${VIA_IR_SUFFIX}/build_sizes_${PROJECT}.json"

                start_ms=$(date +%s%3N)
                forge build --optimize --force ${USE_SOLX} ${VIA_IR_OPTION} --json > ${BUILD_JSON} 2>&1 || true
                end_ms=$(date +%s%3N)
                elapsed_ms=$(( end_ms - start_ms ))
                COMPILE_TIME=$(awk -v ms="${elapsed_ms}" 'BEGIN { printf "%.3f\n", ms / 1000 }')

                # Get build size report
                forge build --optimize --sizes ${USE_SOLX} ${VIA_IR_OPTION} --json > ${BUILD_SIZES_JSON} 2>/dev/null || true

                if [[ ${COMPILER} == *solx* ]]; then
                  TOOLCHAIN="${COMPILER}${VIA_IR_SUFFIX}"
                else
                  TOOLCHAIN="${COMPILER}-${{ steps.solx.outputs.solc-base-version }}${VIA_IR_SUFFIX}"
                fi

                sed -i '/Error: some contracts exceed the runtime size limit/d' "${BUILD_SIZES_JSON}"
                if jq empty "${BUILD_SIZES_JSON}" > /dev/null 2>&1 && [ -s "${BUILD_SIZES_JSON}" ]; then
                  jq --arg project "${PROJECT}" --arg toolchain "${TOOLCHAIN}" \
                    '{data: ., project: $project, toolchain: $toolchain}' \
                    "${BUILD_SIZES_JSON}" > tmp.json
                  mv tmp.json "${BUILD_SIZES_JSON}"
                else
                  echo "Invalid gas JSON: ${BUILD_SIZES_JSON}"
                  cat "${BUILD_SIZES_JSON}"
                fi

                if jq empty "${BUILD_JSON}" > /dev/null 2>&1 && [ -s "${BUILD_JSON}" ]; then
                  jq --arg k "compile_time" --argjson v "${COMPILE_TIME}" '. + {($k): $v}' "${BUILD_JSON}" > tmp.json
                  mv tmp.json "${BUILD_JSON}"
                else
                  echo "Build failed for ${PROJECT} with ${COMPILER} via-ir=${VIA_IR}:"
                  cat "${BUILD_JSON}"
                  continue
                fi

                if jq -e 'has("errors") and (.errors | type == "array") and (.errors | length > 0)' ${BUILD_JSON} > /dev/null; then
                  echo "Errors found in ${BUILD_JSON} for ${PROJECT} with ${COMPILER} via-ir=${VIA_IR}:"
                  jq -r '
                    .errors[] |
                    "🔍 File: \(.sourceLocation.file // "N/A")\n" +
                    "   🔹 Type: \(.type)\n" +
                    "   🔹 Severity: \(.severity)\n" +
                    "   🔹 Error Code: \(.errorCode)\n" +
                    "   🔹 Message:\n     \(.message | gsub("\n"; "\n     "))\n" +
                    "------------------------------------------------------------"
                    ' "${BUILD_JSON}"
                fi

                # Check if there are any errors in src/ directory, we should not run the tests then
                if jq -e '
                  has("errors") and
                  (.errors | type == "array") and
                  (.errors[]? |
                    .severity == "error" and
                    (.sourceLocation.file? | type == "string" and startswith("src/"))
                  )' "${BUILD_JSON}" > /dev/null; then
                  echo "⏭️ Skipping ${BUILD_JSON} due to error in src/"
                  continue
                fi

                COMPILE_ONLY=$(yq ".${PROJECT}.compile_only" "${TOML_CONFIG}")
                if [[ "${COMPILE_ONLY}" == "true" ]]; then
                  echo "Skipping tests for ${PROJECT} as compile_only is set to true"
                  continue
                fi

                FAILED_TESTS_TO_SKIP=$(jq -r '.errors[] | select(.type == "Error") | .sourceLocation.file' ${BUILD_JSON} | sed -E 's/:([^ ]+)//g')
                # Run tests
                DEFAULT_SKIP=$(yq '.profile.default.skip[]' foundry.toml)
                if [[ -n "${DEFAULT_SKIP}" ]] || [[ -n "${FAILED_TESTS_TO_SKIP}" ]]; then
                  SKIP_TESTS="--skip ${DEFAULT_SKIP} ${FAILED_TESTS_TO_SKIP}"
                else
                  SKIP_TESTS=""
                fi
                TEST_JSON="${GITHUB_WORKSPACE}/${COMPILER}${VIA_IR_SUFFIX}/test_${PROJECT}.json"
                GAS_JSON="${GITHUB_WORKSPACE}/${COMPILER}${VIA_IR_SUFFIX}/${PROJECT}.json"
                start_ms=$(date +%s%3N)
                forge test --optimize ${VIA_IR_OPTION} --json ${USE_SOLX} ${DEFAULT_SKIP_TESTS} ${SKIP_TESTS} >"${TEST_JSON}" 2>/dev/null || true
                end_ms=$(date +%s%3N)
                elapsed_ms=$(( end_ms - start_ms ))
                RUN_TIME=$(awk -v ms="${elapsed_ms}" 'BEGIN { printf "%.3f\n", ms / 1000 }')
                jq --arg k "exec_time" --argjson v "${RUN_TIME}" '. + {($k): $v}' "${BUILD_JSON}" > tmp.json
                mv tmp.json "${BUILD_JSON}"

                # Report runtime failures if any
                if jq -e '
                  to_entries | map(.value.test_results | to_entries | map(select(.value.status == "Failure"))) | flatten | length > 0
                  ' "${TEST_JSON}" > /dev/null; then
                    echo "❌ Failing Tests:"
                    jq -r '
                      to_entries[] as $contract |
                      $contract.value.test_results
                      | to_entries[]
                      | select(.value.status == "Failure")
                      | "❌ Test: \($contract.key) / \(.key)\n   🔹 Reason: \(.value.reason // "No reason provided")\n-----------------------------"
                    ' "${TEST_JSON}"
                fi

                GAS_REPORTS="${GITHUB_WORKSPACE}/${COMPILER}${VIA_IR_SUFFIX}/${PROJECT}-gas-reports"
                mkdir -p "${GAS_REPORTS}"

                ITERATIONS=$(yq ".${PROJECT}.run_iterations // ${DEFAULT_ITERATIONS}" "${TOML_CONFIG}")
                for ITER in $(seq "${ITERATIONS}"); do
                  GAS_JSON_ITER="${GAS_REPORTS}/${PROJECT}_${ITER}.json"
                  forge test --optimize --gas-report ${VIA_IR_OPTION} --json ${USE_SOLX} ${DEFAULT_SKIP_TESTS} ${SKIP_TESTS} >"${GAS_JSON_ITER}" 2>/dev/null || true
                done

                # Convert gas JSON reports to benchmark converter format
                for JSON in ${GAS_REPORTS}/*.json; do
                  if [[ ${COMPILER} == *solx* ]]; then
                    TOOLCHAIN="${COMPILER}${VIA_IR_SUFFIX}"
                  else
                    TOOLCHAIN="${COMPILER}-${{ steps.solx.outputs.solc-base-version }}${VIA_IR_SUFFIX}"
                  fi
                  if jq empty "${JSON}" > /dev/null 2>&1 && [ -s "${JSON}" ]; then
                    jq --arg project "${PROJECT}" --arg toolchain "${TOOLCHAIN}" \
                      '{data: ., project: $project, toolchain: $toolchain}' \
                      "${JSON}" > tmp.json
                    mv tmp.json "${JSON}"
                  else
                    echo "Invalid gas JSON: ${JSON}"
                    cat "${JSON}"
                  fi
                done

              done
            done
            # Clean-up environment variables for the project
            while IFS= read -r key; do
              unset "${key}"
              echo "Unset environment variable ${key} for ${PROJECT}."
            done < <(
              yq -oj ".${PROJECT}.env // {} | to_entries[]" "${TOML_CONFIG}" | jq -r '.key'
            )
          done

      - name: Export matrix projects
        id: projects
        run: |
          PROJECTS="${{ matrix.project }}"
          echo "projects=${PROJECTS// /_}" >> ${GITHUB_OUTPUT}

      - name: Upload jsons
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ steps.projects.outputs.projects }}
          path: 'sol*/'


  excel-reports:
    if: ${{ inputs.excel-reports == 'true' }}
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    needs: test
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          path: data
          pattern: 'results-*'
          merge-multiple: 'false'

      - name: Clean-up files
        working-directory: data
        run: |
          find . -type f -name 'build_*.json' ! -name 'build_sizes*.json' -delete
          find . -type f -name 'test_*.json' -delete
          find .

      - name: Install benchmark-converter
        run: |
          cargo install benchmark-analyzer --bin benchmark-converter \
            --git https://github.com/matter-labs/era-compiler-tester

      - name: Run benchmark converter
        run: benchmark-converter --output-path benchmarks-llvm.${{ needs.test.outputs.short-sha }}.xlsx ./data

      - name: Upload Excel reports
        id: excel-reports
        uses: actions/upload-artifact@v4
        with:
          name: excel-reports
          path: benchmarks-llvm.${{ needs.test.outputs.short-sha }}.xlsx

      - name: Add PR comment with excel reports link
        uses: mshick/add-pr-comment@v2
        with:
          message-id: 'excel-reports'
          message: |
            📊 **Excel Report Available**

            Benchmarks measured for:
            * solx candidate version: `${{ needs.test.outputs.solx-version }}`
            * solx ToT version: `${{ needs.test.outputs.solx-tot-version }}`
            * solx latest release version: `${{ needs.test.outputs.solx-latest-release-version }}`
            * solc version: `${{ needs.test.outputs.solc-base-version }}`

            ➡️ [**Download Excel Report**](${{ steps.excel-reports.outputs.artifact-url }})
