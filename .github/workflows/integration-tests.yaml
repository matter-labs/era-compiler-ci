name: Integration Tests

on:
  workflow_call:
    inputs:
      compiler-tester-ref:
        type: string
        required: false
        description: 'Compiler tester revision to use.'
      llvm-ref:
        type: string
        required: false
        description: 'LLVM revision to use.'
      path:
        type: string
        required: false
        default: ''
        description: 'Path filter for integration tests execution. For example: `tests/solidity/`.'
      extra-args:
        type: string
        required: false
        default: ''
        description: 'Extra arguments for era-compiler-tester.'
      custom-solc-run-id:
        type: string
        required: false
        default: ''
        description: 'run id of custom zksync solc artifact to download.'
      custom-solc-version:
        type: string
        required: false
        default: ''
        description: 'custom solc version to use for integration tests'
      ccache-key-type:
        type: string
        required: false
        default: 'dynamic'
        description: 'Type of ccache key: `static` - rotate each month, or `dynamic` - rotate with each update of `LLVM.lock`.'
      save-ccache:
        type: string
        required: false
        default: 'false'
        description: 'Whether to save ccache after the build.'
      compiler-tester-repo:
        type: string
        required: false
        default: 'matter-labs/era-compiler-tester'
        description: 'Compiler tester repository to use. Required for forks testing.'
      compiler-llvm-repo:
        type: string
        required: false
        default: 'matter-labs/era-compiler-llvm'
        description: 'Compiler LLVM repository to use. Required for forks testing.'
      enable-linux-amd64:
        type: boolean
        required: false
        default: true
        description: 'Enable Linux AMD64 tests.'
      enable-linux-arm64:
        type: boolean
        required: false
        default: false
        description: 'Enable Linux ARM64 tests.'
      enable-macos-amd64:
        type: boolean
        required: false
        default: false
        description: 'Enable MacOS AMD64 tests.'
      enable-macos-arm64:
        type: boolean
        required: false
        default: false
        description: 'Enable MacOS ARM64 tests.'
      enable-windows-amd64:
        type: boolean
        required: false
        default: false
        description: 'Enable Windows AMD64 tests.'


jobs:

  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}
    steps:
      - name: Prepare matrix
        id: prepare-matrix
        run: |
          # Define general matrix parameters
          # Windows is disabled due to long paths issue
          # WINDOWS='{"name":"Windows","runner":"windows-2022-github-hosted-64core"}'
          WINDOWS=
          MACOS_AMD64='{"name":"MacOS-x86","runner":"macos-12-large"}'
          MACOS_ARM64='{"name":"MacOS-arm64","runner":["self-hosted","macOS","ARM64"]}'
          LINUX_AMD64='{"name":"Linux-AMD64","runner":"matterlabs-ci-runner","image":"matterlabs/llvm_runner:ubuntu22-llvm17-latest"}'
          LINUX_ARM64='{"name":"Linux-ARM64","runner":"matterlabs-ci-runner-arm","image":"matterlabs/llvm_runner:ubuntu22-llvm17-latest"}'
          # Disable platforms for non-tag builds if user requested
          [ ${{ inputs.enable-windows-amd64 }} != true ] && WINDOWS=
          [ ${{ inputs.enable-macos-amd64 }} != true ] && MACOS_AMD64=
          [ ${{ inputs.enable-macos-arm64 }} != true ] && MACOS_ARM64=
          [ ${{ inputs.enable-linux-amd64 }} != true ] && LINUX_AMD64=
          [ ${{ inputs.enable-linux-arm64 }} != true ] && LINUX_ARM64=
          PLATFORMS=(${WINDOWS} ${MACOS_AMD64} ${MACOS_ARM64} ${LINUX_AMD64} ${LINUX_ARM64})
          echo "matrix={ \"include\": [ $(IFS=, ; echo "${PLATFORMS[*]}") ] }" | tee -a "${GITHUB_OUTPUT}"

  run-integration-tests:
    needs: prepare-matrix
    timeout-minutes: 720
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image || '' }} # Special workaround to allow matrix builds with optional container
      options: -m 110g
    name: Integration tests ${{ matrix.name }}
    steps:

      - name: Prepare Windows env
        if: runner.os == 'Windows'
        uses: matter-labs/era-compiler-ci/.github/actions/prepare-msys@v1

      - name: Integration tests
        uses: matter-labs/era-compiler-ci/.github/actions/integration-tests@aba-multiplatform-integration-tests
        with:
          compiler-tester-ref: ${{ inputs.compiler-tester-ref }}
          llvm-ref: ${{ inputs.llvm-ref }}
          path: ${{ inputs.path }}
          extra-args: ${{ inputs.extra-args }}
          custom-solc-run-id: ${{ inputs.custom-solc-run-id }}
          custom-solc-version: ${{ inputs.custom-solc-version }}
          ccache-key-type: ${{ inputs.ccache-key-type }}
          save-ccache: ${{ inputs.save-ccache }}
          compiler-tester-repo: ${{ inputs.compiler-tester-repo }}
          compiler-llvm-repo: ${{ inputs.compiler-llvm-repo }}

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: (failure() || success()) && (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork)
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
