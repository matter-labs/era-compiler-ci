name: Integration Tests

on:
  workflow_call:
    inputs:
      compiler-tester-ref:
        type: string
        required: false
        description: 'Compiler tester revision to use.'
      llvm-ref:
        type: string
        required: false
        description: 'LLVM revision to use.'
      clone-llvm:
        type: string
        required: false
        default: 'true'
        description: 'Whether to clone LLVM repository. If set to `false`, it will use the LLVM repository from the compiler-tester submodule.'
      path:
        type: string
        required: false
        default: ''
        description: 'Path filter for integration tests execution. For example: `tests/solidity/`.'
      target-machine:
        type: string
        required: false
        default: 'eravm'
        description: 'Target machine passed via `--target` for era-compiler-tester. Available arguments: `eravm`, `evm`.'
      extra-args:
        type: string
        required: false
        default: ''
        description: 'Extra arguments for era-compiler-tester.'
      custom-solc-run-id:
        type: string
        required: false
        default: ''
        description: 'run id of custom zksync solc artifact to download.'
      custom-solc-version:
        type: string
        required: false
        default: ''
        description: 'custom solc version to use for integration tests'
      ccache-key:
        type: string
        description: 'Github Actions cache key for CCache.'
        required: false
        default: ''
      ccache-key-type:
        type: string
        required: false
        default: 'dynamic'
        description: 'Type of ccache key: `static` - rotate each month, or `dynamic` - rotate with each update of `LLVM.lock`.'
      save-ccache:
        type: string
        required: false
        default: 'false'
        description: 'Whether to save ccache after the build.'
      compiler-tester-repo:
        type: string
        required: false
        default: 'matter-labs/era-compiler-tester'
        description: 'Compiler tester repository to use. Required for forks testing.'
      compiler-llvm-repo:
        type: string
        required: false
        default: 'matter-labs/era-compiler-llvm'
        description: 'Compiler LLVM repository to use. Required for forks testing.'
      platforms-matrix:
        type: string
        required: false
        default: '{ "include": [ {"name":"Linux-AMD64","runner":"matterlabs-ci-runner-high-performance","image":"ghcr.io/matter-labs/zksync-llvm-runner:latest"} ] }'
        description: 'Platforms matrix for the job.'
      toolchain:
        type: string
        required: false
        default: 'ir-llvm'
        description: 'Toolchain passed via `--toolchain` for era-compiler-tester. Available arguments: `ir-llvm`, `solc`.'

jobs:

  integration-tests:
    timeout-minutes: 720
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.platforms-matrix) }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image || '' }} # Special workaround to allow matrix builds with optional container
      options: -m 110g
    name: ${{ inputs.target-machine }} ${{ matrix.name }}
    steps:

      - name: Checkout compiler-tester
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.compiler-tester-repo }}
          ref: ${{ inputs.compiler-tester-ref || github.head_ref || '' }}
          submodules: recursive

      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --force --depth=1 --recursive --checkout

      - name: Checkout LLVM
        if: inputs.llvm-ref != ''
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.compiler-llvm-repo }}
          ref: ${{ inputs.llvm-ref }}
          path: llvm

      - name: Prepare Windows env
        if: runner.os == 'Windows'
        uses: matter-labs/era-compiler-ci/.github/actions/prepare-msys@v1

      - name: Building solc
        if: inputs.target-machine == 'evm' && inputs.toolchain == 'ir-llvm' && inputs.custom-solc-run-id == ''
        uses: matter-labs/era-compiler-ci/.github/actions/build-solc@main
        with:
          cmake-build-type: RelWithDebInfo
          working-dir: 'era-solidity'
          upload-testing-binary: false

      - name: Download prebuilt solc
        if: inputs.target-machine == 'evm' && inputs.toolchain == 'ir-llvm' && inputs.custom-solc-run-id != ''
        uses: actions/download-artifact@v4
        with:
          pattern: build-solc-*
          path: ./era-solidity/build/
          run-id: ${{ inputs.custom-solc-run-id }}
          merge-multiple: true

      # An issue prevents to correctly use the same version of composite actions from `workflow_call`
      # https://github.com/actions/toolkit/issues/1264
      # for now, it will always be taken from the latest main
      - name: Build LLVM
        uses: matter-labs/era-compiler-ci/.github/actions/build-llvm@main
        with:
          enable-tests: true
          enable-assertions: true
          build-type: 'RelWithDebInfo'
          clone-llvm: ${{ (inputs.llvm-ref == '' && inputs.clone-llvm == 'true') && 'true' || 'false' }}
          ccache-key: ${{ inputs.ccache-key }}
          ccache-key-type: ${{ inputs.ccache-key-type }}

      - name: Integration tests
        uses: matter-labs/era-compiler-ci/.github/actions/integration-tests@main
        env:
          BOOST_PREFIX: ${{ github.workspace }}/era-solidity/boost/lib
          SOLC_PREFIX: ${{ github.workspace }}/era-solidity/build
        with:
          path: ${{ inputs.path }}
          extra-args: ${{ inputs.extra-args }}
          custom-solc-run-id: ${{ inputs.custom-solc-run-id }}
          custom-solc-version: ${{ inputs.custom-solc-version }}
          target-machine: ${{ inputs.target-machine }}
          toolchain: ${{ inputs.toolchain }}

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: (failure() || success()) && (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork)
        with:
          job_name: ${{ inputs.target-machine }} ${{ matrix.name }}
          status: ${{ job.status }}
          fields: repo,commit,author,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
